#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="UIComponents",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIColor;
@class NSCoder;

IB_DESIGNABLE
SWIFT_CLASS("_TtC12UIComponents15AmountInputView")
@interface AmountInputView : UIView
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull inactiveColor;
/// The grouping separator of the input field. If not specified, <code>Locale.groupingSeparator</code> is used.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull groupingSeparator;
/// The decimal separator of the input field. If not specified, <code>Locale.groupingSeparator</code> is used.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull decimalSeparator;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end




SWIFT_PROTOCOL("_TtP12UIComponents23AmountInputViewDelegate_")
@protocol AmountInputViewDelegate
/// Currency changed to the specified index.
- (void)amountInputView:(AmountInputView * _Nonnull)inputView didSelectCurrencyAt:(NSInteger)index;
@optional
- (BOOL)amountInputViewShouldBeginEditing:(AmountInputView * _Nonnull)inputView SWIFT_WARN_UNUSED_RESULT;
- (void)amountInputViewDidBeginEditing:(AmountInputView * _Nonnull)inputView;
- (BOOL)amountInputViewShouldEndEditing:(AmountInputView * _Nonnull)inputView SWIFT_WARN_UNUSED_RESULT;
- (void)amountInputViewDidEndEditing:(AmountInputView * _Nonnull)inputView;
- (void)amountInputViewDidEndEditing:(AmountInputView * _Nonnull)inputView reason:(UITextFieldDidEndEditingReason)reason;
- (void)amountInputViewDidChangeSelection:(AmountInputView * _Nonnull)inputView;
- (BOOL)amountInputViewShouldClear:(AmountInputView * _Nonnull)inputView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)amountInputViewShouldReturn:(AmountInputView * _Nonnull)inputView SWIFT_WARN_UNUSED_RESULT;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC12UIComponents13KeyValueLabel")
@interface KeyValueLabel : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// FIXME: There is a known issue where in <code>intrinsicContentSize</code> property for
/// width without constraints (leading and trailing) is 65556.5.
/// To reproduce the issue, add <code>KeyValueLabel</code> in the IB and set only leading constraints.
/// Width is growing unexpectedly.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Margin between labels.
@property (nonatomic) IBInspectable CGFloat margin;
/// The current text that is displayed by the key label.
@property (nonatomic, copy) IBInspectable NSString * _Nullable keyText;
/// The current text that is displayed by the value label.
@property (nonatomic, copy) IBInspectable NSString * _Nullable valueText;
/// The color of the key label text.
@property (nonatomic, strong) IBInspectable UIColor * _Null_unspecified keyTextColor;
/// The color of the value label text.
@property (nonatomic, strong) IBInspectable UIColor * _Null_unspecified valueTextColor;
/// A Boolean value indicating whether the font size should be reduced
/// in order to fit the title string into the key label’s bounding rectangle.
@property (nonatomic) IBInspectable BOOL keyAdjustsFontSizeToFitWidth;
/// A Boolean value indicating whether the font size should be reduced
/// in order to fit the title string into the value label’s bounding rectangle.
@property (nonatomic) IBInspectable BOOL valueAdjustsFontSizeToFitWidth;
/// The minimum scale factor supported for the key label’s text.
@property (nonatomic) IBInspectable CGFloat keyMinimumScaleFactor;
/// The minimum scale factor supported for the value label’s text.
@property (nonatomic) IBInspectable CGFloat valueMinimumScaleFactor;
@end






SWIFT_CLASS("_TtC12UIComponents12KeyValueList")
@interface KeyValueList : UIView
/// The view’s background color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end



@class KeyValueListTitleLabel;

SWIFT_PROTOCOL("_TtP12UIComponents20KeyValueListDelegate_")
@protocol KeyValueListDelegate
@optional
/// Number of sections in the list. If not implemented, value is 1.
- (NSInteger)numberOfSectionsIn:(KeyValueList * _Nonnull)keyValueList SWIFT_WARN_UNUSED_RESULT;
@required
/// Number of KeyValueLabel in the specified section.
- (NSInteger)keyValueList:(KeyValueList * _Nonnull)keyValueList numberOfLabelsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// KeyValueLabel in the specified indexPath. Any customization for <code>KeyValueLabel</code> should be applied here.
- (KeyValueLabel * _Nonnull)keyValueList:(KeyValueList * _Nonnull)keyValueList labelFor:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@optional
/// Tap interaction in the label at specifed index.
- (void)keyValueList:(KeyValueList * _Nonnull)keyValueList didTapLabelAt:(NSIndexPath * _Nonnull)indexPath;
/// Title label for the header in the specified section. Any customization for <code>UILabel</code> should be applied here.
- (KeyValueListTitleLabel * _Nullable)keyValueList:(KeyValueList * _Nonnull)keyValueList titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// View for footer in the list
- (UIColor * _Nullable)keyValueList:(KeyValueList * _Nonnull)keyValueList separatorColorForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Separator insets for the footer for specified index, from all four corners (top, bottom, left and right).
/// If not implemented, value is <code>UIEdgeInsets.zero</code>.
- (UIEdgeInsets)keyValueList:(KeyValueList * _Nonnull)keyValueList separatorInsetForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Separator insets for the label at specified index
/// If not implemented, value is 10-left and 10-right
- (UIEdgeInsets)keyValueList:(KeyValueList * _Nonnull)keyValueList separatorInsetFor:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12UIComponents18KeyValueListFooter")
@interface KeyValueListFooter : UITableViewHeaderFooterView
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// <code>UILabel</code> with insets.
SWIFT_CLASS("_TtC12UIComponents22KeyValueListTitleLabel")
@interface KeyValueListTitleLabel : UILabel
- (void)drawTextInRect:(CGRect)rect;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@interface UITextField (SWIFT_EXTENSION(UIComponents))
/// Placeholder color of the textfield.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull placeholderColor;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="UIComponents",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIColor;
@class NSCoder;

IB_DESIGNABLE
SWIFT_CLASS("_TtC12UIComponents15AmountInputView")
@interface AmountInputView : UIView
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull inactiveColor;
/// The grouping separator of the input field. If not specified, <code>Locale.groupingSeparator</code> is used.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull groupingSeparator;
/// The decimal separator of the input field. If not specified, <code>Locale.groupingSeparator</code> is used.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull decimalSeparator;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end




SWIFT_PROTOCOL("_TtP12UIComponents23AmountInputViewDelegate_")
@protocol AmountInputViewDelegate
/// Currency changed to the specified index.
- (void)amountInputView:(AmountInputView * _Nonnull)inputView didSelectCurrencyAt:(NSInteger)index;
@optional
- (BOOL)amountInputViewShouldBeginEditing:(AmountInputView * _Nonnull)inputView SWIFT_WARN_UNUSED_RESULT;
- (void)amountInputViewDidBeginEditing:(AmountInputView * _Nonnull)inputView;
- (BOOL)amountInputViewShouldEndEditing:(AmountInputView * _Nonnull)inputView SWIFT_WARN_UNUSED_RESULT;
- (void)amountInputViewDidEndEditing:(AmountInputView * _Nonnull)inputView;
- (void)amountInputViewDidEndEditing:(AmountInputView * _Nonnull)inputView reason:(UITextFieldDidEndEditingReason)reason;
- (void)amountInputViewDidChangeSelection:(AmountInputView * _Nonnull)inputView;
- (BOOL)amountInputViewShouldClear:(AmountInputView * _Nonnull)inputView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)amountInputViewShouldReturn:(AmountInputView * _Nonnull)inputView SWIFT_WARN_UNUSED_RESULT;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC12UIComponents13KeyValueLabel")
@interface KeyValueLabel : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// FIXME: There is a known issue where in <code>intrinsicContentSize</code> property for
/// width without constraints (leading and trailing) is 65556.5.
/// To reproduce the issue, add <code>KeyValueLabel</code> in the IB and set only leading constraints.
/// Width is growing unexpectedly.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Margin between labels.
@property (nonatomic) IBInspectable CGFloat margin;
/// The current text that is displayed by the key label.
@property (nonatomic, copy) IBInspectable NSString * _Nullable keyText;
/// The current text that is displayed by the value label.
@property (nonatomic, copy) IBInspectable NSString * _Nullable valueText;
/// The color of the key label text.
@property (nonatomic, strong) IBInspectable UIColor * _Null_unspecified keyTextColor;
/// The color of the value label text.
@property (nonatomic, strong) IBInspectable UIColor * _Null_unspecified valueTextColor;
/// A Boolean value indicating whether the font size should be reduced
/// in order to fit the title string into the key label’s bounding rectangle.
@property (nonatomic) IBInspectable BOOL keyAdjustsFontSizeToFitWidth;
/// A Boolean value indicating whether the font size should be reduced
/// in order to fit the title string into the value label’s bounding rectangle.
@property (nonatomic) IBInspectable BOOL valueAdjustsFontSizeToFitWidth;
/// The minimum scale factor supported for the key label’s text.
@property (nonatomic) IBInspectable CGFloat keyMinimumScaleFactor;
/// The minimum scale factor supported for the value label’s text.
@property (nonatomic) IBInspectable CGFloat valueMinimumScaleFactor;
@end






SWIFT_CLASS("_TtC12UIComponents12KeyValueList")
@interface KeyValueList : UIView
/// The view’s background color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end



@class KeyValueListTitleLabel;

SWIFT_PROTOCOL("_TtP12UIComponents20KeyValueListDelegate_")
@protocol KeyValueListDelegate
@optional
/// Number of sections in the list. If not implemented, value is 1.
- (NSInteger)numberOfSectionsIn:(KeyValueList * _Nonnull)keyValueList SWIFT_WARN_UNUSED_RESULT;
@required
/// Number of KeyValueLabel in the specified section.
- (NSInteger)keyValueList:(KeyValueList * _Nonnull)keyValueList numberOfLabelsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// KeyValueLabel in the specified indexPath. Any customization for <code>KeyValueLabel</code> should be applied here.
- (KeyValueLabel * _Nonnull)keyValueList:(KeyValueList * _Nonnull)keyValueList labelFor:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@optional
/// Tap interaction in the label at specifed index.
- (void)keyValueList:(KeyValueList * _Nonnull)keyValueList didTapLabelAt:(NSIndexPath * _Nonnull)indexPath;
/// Title label for the header in the specified section. Any customization for <code>UILabel</code> should be applied here.
- (KeyValueListTitleLabel * _Nullable)keyValueList:(KeyValueList * _Nonnull)keyValueList titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// View for footer in the list
- (UIColor * _Nullable)keyValueList:(KeyValueList * _Nonnull)keyValueList separatorColorForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Separator insets for the footer for specified index, from all four corners (top, bottom, left and right).
/// If not implemented, value is <code>UIEdgeInsets.zero</code>.
- (UIEdgeInsets)keyValueList:(KeyValueList * _Nonnull)keyValueList separatorInsetForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Separator insets for the label at specified index
/// If not implemented, value is 10-left and 10-right
- (UIEdgeInsets)keyValueList:(KeyValueList * _Nonnull)keyValueList separatorInsetFor:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12UIComponents18KeyValueListFooter")
@interface KeyValueListFooter : UITableViewHeaderFooterView
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// <code>UILabel</code> with insets.
SWIFT_CLASS("_TtC12UIComponents22KeyValueListTitleLabel")
@interface KeyValueListTitleLabel : UILabel
- (void)drawTextInRect:(CGRect)rect;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@interface UITextField (SWIFT_EXTENSION(UIComponents))
/// Placeholder color of the textfield.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull placeholderColor;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
