// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MBNetworking
import Foundation
import MBErrorKit
import Security
import Swift
extension Networkable {
  public func fetch<V>(_ type: V.Type, completion: @escaping ((Swift.Result<V, MBErrorKit.NetworkingError>) -> Swift.Void)) where V : Swift.Decodable
}
extension Networkable {
  public func getRequest(url: Foundation.URL, queryItems: [Swift.String : Swift.String] = [:], headers: [Swift.String : Swift.String] = [:]) -> Foundation.URLRequest
  public func getRequest<T>(url: Foundation.URL, encodable data: T, headers: [Swift.String : Swift.String] = [:]) -> Foundation.URLRequest where T : Swift.Encodable
  public func getRequest(url: Foundation.URL, formItems: [Swift.String : Swift.String] = [:], headers: [Swift.String : Swift.String] = [:]) -> Foundation.URLRequest
}
public enum NetworkContentType : Swift.String {
  case json
  case urlencoded
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol Networkable {
  var request: Foundation.URLRequest { get }
}
public enum NetworkableConfigs {
  case `default`
  public func setCertificatePaths(_ certificateResourcePaths: Swift.String...)
  public func setTimeout(for request: Foundation.TimeInterval, resource: Foundation.TimeInterval)
  public static func == (a: MBNetworking.NetworkableConfigs, b: MBNetworking.NetworkableConfigs) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension URL {
  public init(forceString string: Swift.String)
  public func adding(parameters: [Swift.String : Swift.String]) -> Foundation.URL
}
extension MBNetworking.NetworkContentType : Swift.Equatable {}
extension MBNetworking.NetworkContentType : Swift.Hashable {}
extension MBNetworking.NetworkContentType : Swift.RawRepresentable {}
extension MBNetworking.NetworkableConfigs : Swift.Equatable {}
extension MBNetworking.NetworkableConfigs : Swift.Hashable {}
